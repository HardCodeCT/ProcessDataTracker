name: Build ProcessDataSaver Driver
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
jobs:
  build-driver:
    runs-on: windows-latest
   
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2
    - name: Create packages.config
      shell: powershell
      run: |
        $packages = @"
        <?xml version="1.0" encoding="utf-8"?>
        <packages>
          <package id="Microsoft.Windows.SDK.CPP" version="10.0.26100.2454" targetFramework="native" />
          <package id="Microsoft.Windows.SDK.CPP.x64" version="10.0.26100.2454" targetFramework="native" />
          <package id="Microsoft.Windows.WDK.x64" version="10.0.26100.2454" targetFramework="native" />
        </packages>
        "@
        $packages | Out-File -FilePath "packages.config" -Encoding ASCII
    - name: Create Directory.Build.props
      shell: powershell
      run: |
        $props = @"
        <Project>
        <Import Project="packages\Microsoft.Windows.WDK.x64.10.0.26100.2454\build\native\Microsoft.Windows.WDK.x64.props" Condition="Exists('packages\Microsoft.Windows.WDK.x64.10.0.26100.2454\build\native\Microsoft.Windows.WDK.x64.props') and '$(Platform)' == 'x64'"/>
        <Import Project="packages\Microsoft.Windows.SDK.CPP.x64.10.0.26100.2454\build\native\Microsoft.Windows.SDK.cpp.x64.props" Condition="Exists('packages\Microsoft.Windows.SDK.CPP.x64.10.0.26100.2454\build\native\Microsoft.Windows.SDK.cpp.x64.props') and '$(Platform)' == 'x64'"/>
        <Import Project="packages\Microsoft.Windows.SDK.CPP.10.0.26100.2454\build\native\Microsoft.Windows.SDK.cpp.props" Condition="Exists('packages\Microsoft.Windows.SDK.CPP.10.0.26100.2454\build\native\Microsoft.Windows.SDK.cpp.props')"/>
        </Project>
        "@
        $props | Out-File -FilePath "Directory.Build.props" -Encoding ASCII
    - name: Restore NuGet Packages
      run: nuget restore packages.config -PackagesDirectory packages
    - name: Create vcxproj
      shell: powershell
      run: |
        $vcxproj = @"
        <?xml version="1.0" encoding="utf-8"?>
        <Project DefaultTargets="Build" ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
          <ItemGroup Label="ProjectConfigurations">
            <ProjectConfiguration Include="Release|x64">
              <Configuration>Release</Configuration>
              <Platform>x64</Platform>
            </ProjectConfiguration>
          </ItemGroup>
          <PropertyGroup Label="Globals">
            <VCProjectVersion>15.0</VCProjectVersion>
            <ProjectGuid>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</ProjectGuid>
            <Keyword>Win32Proj</Keyword>
          </PropertyGroup>
          <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
          <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
            <ConfigurationType>Driver</ConfigurationType>
            <DriverType>WDM</DriverType>
            <PlatformToolset>WindowsKernelModeDriver10.0</PlatformToolset>
          </PropertyGroup>
          <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
          <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
            <ClCompile>
              <WarningLevel>Level3</WarningLevel>
              <Optimization>MaxSpeed</Optimization>
              <AdditionalOptions>/D _WIN64 /D _AMD64_ /D AMD64 /wd4201 /wd4214 /wd4100 /wd4115 /wd4127 /wd4131 %(AdditionalOptions)</AdditionalOptions>
              <SDLCheck>false</SDLCheck>
              <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
              <BufferSecurityCheck>true</BufferSecurityCheck>
              <FunctionLevelLinking>true</FunctionLevelLinking>
              <TreatWChar_tAsBuiltInType>true</TreatWChar_tAsBuiltInType>
              <ForceConformanceInForLoopScope>true</ForceConformanceInForLoopScope>
              <RuntimeTypeInfo>false</RuntimeTypeInfo>
              <ExceptionHandling>false</ExceptionHandling>
              <InlineFunctionExpansion>AnySuitable</InlineFunctionExpansion>
            </ClCompile>
            <Link>
              <AdditionalDependencies>ntoskrnl.lib;hal.lib;fwpkclnt.lib;wdmsec.lib;%(AdditionalDependencies)</AdditionalDependencies>
              <GenerateDebugInformation>true</GenerateDebugInformation>
              <SubSystem>Native</SubSystem>
              <OptimizeReferences>true</OptimizeReferences>
              <EnableCOMDATFolding>true</EnableCOMDATFolding>
              <EntryPointSymbol>DriverEntry</EntryPointSymbol>
              <IncrementalLink>false</IncrementalLink>
            </Link>
          </ItemDefinitionGroup>
          <ItemGroup>
            <ClCompile Include="processdatasaver.c" />
          </ItemGroup>
          <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
            <TargetName>processdatasaver</TargetName>
            <TargetExt>.sys</TargetExt>
          </PropertyGroup>
          <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
        </Project>
        "@
        $vcxproj | Out-File -FilePath "processdatasaver.vcxproj" -Encoding ASCII
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2
    - name: Build Driver
      run: msbuild processdatasaver.vcxproj /p:Configuration=Release /p:Platform=x64
    - name: Upload Driver Artifact
      uses: actions/upload-artifact@v4
      with:
        name: processdatasaver-x64
        path: x64/Release/processdatasaver.sys
        if-no-files-found: error
    - name: Build Summary
      if: always()
      shell: powershell
      run: |
        Write-Host "`n========================================" -ForegroundColor Cyan
        Write-Host " BUILD SUMMARY" -ForegroundColor Cyan
        Write-Host "========================================" -ForegroundColor Cyan
       
        if (Test-Path "x64/Release/processdatasaver.sys") {
            $file = Get-Item "x64/Release/processdatasaver.sys"
            Write-Host "âœ“ Status: SUCCESS" -ForegroundColor Green
            Write-Host "âœ“ Driver: processdatasaver.sys" -ForegroundColor Green
            Write-Host "âœ“ Size: $([math]::Round($file.Length/1KB, 2)) KB" -ForegroundColor Green
            Write-Host "`nðŸ“¦ Download from 'Artifacts' section below" -ForegroundColor Yellow
        } else {
            Write-Host "âœ— Status: FAILED" -ForegroundColor Red
            Write-Host "âœ— Driver file not generated" -ForegroundColor Red
        }
       
        Write-Host "========================================`n" -ForegroundColor Cyan
