name: Build ProcessDataTracker Driver

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Manual trigger button

jobs:
  build-driver:
    runs-on: windows-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
    
    - name: Download and Install WDK
      shell: powershell
      run: |
        Write-Host "=== Installing Windows Driver Kit ==="
        
        # Create temp directory
        $tempDir = "$env:TEMP\wdk_install"
        New-Item -ItemType Directory -Force -Path $tempDir | Out-Null
        
        # Download WDK
        Write-Host "Downloading WDK installer..."
        $wdkUrl = "https://go.microsoft.com/fwlink/?linkid=2249371"
        $wdkInstaller = "$tempDir\wdksetup.exe"
        
        try {
            Invoke-WebRequest -Uri $wdkUrl -OutFile $wdkInstaller -UseBasicParsing
            Write-Host "WDK installer downloaded successfully"
        } catch {
            Write-Host "Error downloading WDK: $_"
            exit 1
        }
        
        # Install WDK
        Write-Host "Installing WDK (this takes 10-15 minutes)..."
        Write-Host "Please wait..."
        
        $process = Start-Process -FilePath $wdkInstaller -ArgumentList "/quiet", "/norestart", "/ceip off" -Wait -PassThru
        
        if ($process.ExitCode -eq 0 -or $process.ExitCode -eq 3010) {
            Write-Host "WDK installation completed successfully (Exit code: $($process.ExitCode))"
        } else {
            Write-Host "WDK installation failed with exit code: $($process.ExitCode)"
            exit 1
        }
        
        # Verify installation
        $wdkPath = "C:\Program Files (x86)\Windows Kits\10"
        if (Test-Path $wdkPath) {
            Write-Host "âœ“ WDK found at: $wdkPath"
            
            # Find SDK version
            $includePath = Join-Path $wdkPath "Include"
            if (Test-Path $includePath) {
                $versions = Get-ChildItem $includePath -Directory | Where-Object { $_.Name -match "10\.0\.\d+" } | Sort-Object Name -Descending
                if ($versions) {
                    Write-Host "âœ“ Available SDK versions:"
                    foreach ($ver in $versions) {
                        Write-Host "  - $($ver.Name)"
                        $kmPath = Join-Path $ver.FullName "km\ntddk.h"
                        if (Test-Path $kmPath) {
                            Write-Host "    âœ“ ntddk.h found"
                        }
                    }
                }
            }
        } else {
            Write-Host "âœ— WDK not found at expected location"
            exit 1
        }
        
        Write-Host "=== WDK Installation Complete ==="
    
    - name: Detect WDK Version and Build Driver
      shell: powershell
      run: |
        Write-Host "=== Building Driver ==="
        
        # Find WDK installation
        $wdkPath = "C:\Program Files (x86)\Windows Kits\10"
        if (-not (Test-Path $wdkPath)) {
            Write-Host "ERROR: WDK not found at $wdkPath"
            exit 1
        }
        
        # Find latest SDK version
        $includePath = Join-Path $wdkPath "Include"
        $sdkVersions = Get-ChildItem $includePath -Directory | Where-Object { $_.Name -match "10\.0\.\d+\.\d+" } | Sort-Object Name -Descending
        
        if (-not $sdkVersions) {
            Write-Host "ERROR: No SDK versions found"
            exit 1
        }
        
        $sdkVersion = $sdkVersions[0].Name
        Write-Host "Using SDK version: $sdkVersion"
        
        # Verify paths
        $kmInclude = Join-Path $wdkPath "Include\$sdkVersion\km"
        $sharedInclude = Join-Path $wdkPath "Include\$sdkVersion\shared"
        $umInclude = Join-Path $wdkPath "Include\$sdkVersion\um"
        $libPath = Join-Path $wdkPath "Lib\$sdkVersion\km\x64"
        
        Write-Host "Verifying paths..."
        Write-Host "  KM Include: $kmInclude - $(Test-Path $kmInclude)"
        Write-Host "  Shared Include: $sharedInclude - $(Test-Path $sharedInclude)"
        Write-Host "  UM Include: $umInclude - $(Test-Path $umInclude)"
        Write-Host "  Lib Path: $libPath - $(Test-Path $libPath)"
        
        # Check for ntddk.h
        $ntddkPath = Join-Path $kmInclude "ntddk.h"
        if (Test-Path $ntddkPath) {
            Write-Host "âœ“ ntddk.h found at: $ntddkPath"
        } else {
            Write-Host "âœ— ntddk.h not found!"
            exit 1
        }
        
        # Create build script
        $buildScript = @"
@echo off
echo Building ProcessDataTracker driver...

set WDK_PATH=$wdkPath
set SDK_VERSION=$sdkVersion

REM Set up Visual Studio environment
call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"

REM Include paths
set INCLUDE_PATHS=/I"%WDK_PATH%\Include\%SDK_VERSION%\km" /I"%WDK_PATH%\Include\%SDK_VERSION%\shared" /I"%WDK_PATH%\Include\%SDK_VERSION%\um"

REM Library paths
set LIB_PATHS=/LIBPATH:"%WDK_PATH%\Lib\%SDK_VERSION%\km\x64"

echo.
echo Compiling driver...
cl.exe /c /nologo /W3 /WX- /O2 /Oi /GL /D NDEBUG /D _WIN64 /D _AMD64_ /D AMD64 /Gm- /EHsc /MD /GS /Gy /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /GR- /Fo"ProcessDataTracker.obj" /Fd"ProcessDataTracker.pdb" /kernel /Gd /wd4201 /wd4214 /wd4100 /wd4117 %INCLUDE_PATHS% ProcessDataTracker.c

if errorlevel 1 (
    echo Compilation failed!
    exit /b 1
)

echo.
echo Linking driver...
link.exe /DRIVER /KERNEL /NOLOGO /OUT:"ProcessDataTracker.sys" /SUBSYSTEM:NATIVE /DYNAMICBASE:NO /NODEFAULTLIB /ENTRY:DriverEntry /RELEASE /INCREMENTAL:NO /OPT:REF /OPT:ICF /LTCG %LIB_PATHS% ntoskrnl.lib hal.lib wdmsec.lib fwpkclnt.lib ProcessDataTracker.obj

if errorlevel 1 (
    echo Linking failed!
    exit /b 1
)

echo.
echo Build completed successfully!
dir ProcessDataTracker.sys
"@
        
        $buildScript | Out-File -FilePath "build.bat" -Encoding ASCII
        
        # Run build
        Write-Host "`n=== Running Build ==="
        cmd /c build.bat
        
        if ($LASTEXITCODE -ne 0) {
            Write-Host "Build failed with exit code: $LASTEXITCODE"
            exit 1
        }
        
        # Verify output
        if (Test-Path "ProcessDataTracker.sys") {
            $fileInfo = Get-Item "ProcessDataTracker.sys"
            Write-Host "`nâœ“ Driver built successfully!"
            Write-Host "  File: ProcessDataTracker.sys"
            Write-Host "  Size: $($fileInfo.Length) bytes"
        } else {
            Write-Host "`nâœ— Driver file not found after build"
            exit 1
        }
    
    - name: Upload Driver Artifact (x64)
      uses: actions/upload-artifact@v4
      with:
        name: ProcessDataTracker-x64
        path: ProcessDataTracker.sys
        if-no-files-found: error
    
    - name: Build Summary
      shell: powershell
      run: |
        Write-Host "`n===== BUILD SUMMARY ====="
        if (Test-Path "ProcessDataTracker.sys") {
          $fileInfo = Get-Item "ProcessDataTracker.sys"
          Write-Host "âœ“ x64 Driver built successfully"
          Write-Host "  File: ProcessDataTracker.sys"
          Write-Host "  Size: $($fileInfo.Length) bytes ($([math]::Round($fileInfo.Length/1KB, 2)) KB)"
          Write-Host "`nðŸ“¦ Download the artifact from the 'Artifacts' section below"
        } else {
          Write-Host "âœ— Build failed - no driver file generated"
          exit 1
        }
        Write-Host "========================="
